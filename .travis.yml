language: node_js

node_js:
  - 8

sudo: false

cache:
  yarn: true

env:
  global:

before_install:
# setup rustc
- curl https://sh.rustup.rs -sSf | sh -s -- -y
- $HOME/.cargo/bin/rustup default stable
# get commit message
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
# put local node-pre-gyp on PATH
- export PATH=./node_modules/.bin/:$HOME/.cargo/bin/:$PATH
# put global node-gyp on PATH
- npm install node-gyp node-pre-gyp-github neon-cli -g
# figure out if we should publish
- PUBLISH_BINARY=false
# if we are building a tag then publish
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
# or if we put [publish binary] in the commit message
- if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi;
# install a newer version of yarn
- curl -o- -L https://yarnpkg.com/install.sh | bash -s

install:
# ensure source install works
- yarn install

script:
# if publishing, test installing from remote
# INSTALL_RESULT=0
# if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi;
# if install returned non zero (errored) then we first unpublish and then call false so travis will bail at this line
# if [[ $INSTALL_RESULT != 0 ]]; then echo "returned $INSTALL_RESULT";node-pre-gyp unpublish;false; fi
# If success then we arrive here so lets clean up
# node-pre-gyp clean
#
# test our module
- yarn test


after_success:
# if publishing, do it
- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package; node-pre-gyp-github publish; fi;
# cleanup
- node-pre-gyp clean
- node-gyp clean
# if success then query and display all published binaries
- node-pre-gyp info

matrix:
  include:
    - os: linux
    - os: osx
      osx_image: xcode8.3
